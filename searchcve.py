#!/usr/bin/env python3

###################################### Created by VoyN1ch ###################################################################


"""
usage: searchcve.py [-h] [-u] [-i INPUT_FILE] [[-k KEYWORD] [--version VERSION]] [-o OUTPUT] [-c CVE]
optional arguments:
  -h, --help            show this help message and exit
  -u, --url             show today\'s CVE
  -i INPUT_FILE, --input INPUT_FILE
                        Choose the path to input file containing product and version e.g. "fortios.csv"
  -k KEYWORD, --keyword KEYWORD
                        Choose product e.g. "fortios" or vendor e.g "fortigate"
  --version VERSION     Use with -k. Choose version e.g. "6.4.4"
  -o OUTPUT, --output OUTPUT
                        Output keyword result to csv
  -c CVE, --cve CVE     show CVE information e.g. "CVE-2020-1472"
"""

import json
import argparse
import re
import requests
from bs4 import BeautifulSoup
from datetime import date
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import pandas as pd
import os

########################### -u / --url ###########################
def search_cert():
    translate = {
        "January": "janvier",
        "February": "février",
        "March": "mars",
        "April": "avril",
        "May": "mai",
        "June": "juin",
        "July": "juillet",
        "August": "août",
        "September": "septembre",
        "October": "octobre",
        "November": "novembre",
        "December": "décembre"
    }

    today = date.today()
    today_month = today.strftime("%B")
    today = today.strftime("%-d " + translate[today_month] + " %Y")

    cert_request = requests.get("https://www.cert.ssi.gouv.fr/avis/")

    if cert_request.status_code == 200:
        cert_search = re.findall("CERTFR-[0-9]{4}-AVI-[0-9]{3,}", cert_request.text)

        if cert_search == []:
            print("No CERT found, aborting.")
            return

        cert_list = sorted(set(cert_search), reverse=True)

        header = True
        for i in range (0, len(cert_list)):
            cert_date = check_date(today,cert_request,i)
            if cert_date == True:
                cert_screen(header,cert_list[i])
                header = False
            else:
                print("No CERT found, aborting.")
                break
    else:
        raise Exception("HTTP error: " + str(cert_request.status_code))

def check_date(today,cert_request,i):
    cert_soup = BeautifulSoup(cert_request.text, "html.parser")

    cert_date = str(cert_soup.find_all("span", class_="item-date")[i].string.strip())
    cert_date = cert_date.encode('latin1').decode()

    if cert_date == "Publié le " + today:
        return True
    else:
        return False

def cert_screen(header,cert_list):
    cve = []
    cvss = []

    if header == True:
        print("\nFound CERTs:\n")
        print("--------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        print("CERT                | Title                                                        | URL                                                   | CVE             | CVSS |")
        print("--------------------------------------------------------------------------------------------------------------------------------------------------------------------")
    else:
        pass

    cert_url = "https://www.cert.ssi.gouv.fr/avis/" + cert_list
    cert_request = requests.get(cert_url)
    cve_search = re.findall("CVE-[0-9]{4}-[0-9]{4,}", cert_request.text)     

    cve=list(set(cve_search))

    cert_soup = BeautifulSoup(cert_request.text, "html5lib")

    title = str(cert_soup.find_all("td", class_="col-xs-8")[1].string.strip())
    title = title.encode('latin1').decode()

    if len(cert_list) != 16:
        for i in range (16 - len(cert_list)):
            cert_list += " "
    if len(title) != 60:
        for i in range (60 - len(title)):
            title += " "
    if len(cert_url) != 49:
        for i in range (49 - len(cert_url)):
            cert_url += " "

    if cve == []:
        cve == ["N/A"]
    else:
        pass

    count = 0
    for i in range(0,len(cve)):
        if cve[i] != "N/A":
            cvss.append(exctration_cvss(cve[i]))
        else:
            cvss.append("N/A")

        if len(cve[i]) != 15:
            for k in range (15 - len(cve[i])):
                cve[i] += " "

        if count == 0:
            print(cert_list + " | " + title + " | " + cert_url + " | " + cve[i] + " | " + str(cvss[i]) + "  |")             
        else:
            print("                   " + " | " + "                                                            " + " | " + "                                                     " + " | " + cve[i] + " | " + str(cvss[i]) + "  |") 
        count += 1
    print("--------------------------------------------------------------------------------------------------------------------------------------------------------------------")

    send_email(cert_soup,title,cvss)

def exctration_cvss(cve):
    nist_url = "https://services.nvd.nist.gov/rest/json/cve/1.0/" + cve
    nist_request = requests.get(nist_url)
    
    try:
        todos = json.loads(nist_request.text)

        cvss = todos["result"]["CVE_Items"][0]["impact"]
        
        if "baseMetricV3" in cvss:
            cvss = str(cvss["baseMetricV3"]["cvssV3"]["baseScore"])
        elif "baseMetricV2" in cvss:
            cvss = str(cvss["baseMetricV2"]["cvssV2"]["baseScore"]) + " (V2)"
        else:
            cvss = "N/A"
    except:
        cvss = "N/A"
    
    return cvss

def send_email(cert_soup,title,cvss):
    contenu_mail = str(cert_soup.find("article", class_="article"))
    contenu_mail = re.sub("\t+(<div.+\n+|<img.+\n+)", "", contenu_mail)
    contenu_mail = contenu_mail.encode('latin1').decode()

    cvss=list(set(cvss))
    
    if "N/A" in cvss:
        cvss.remove("N/A")

    if cvss != []:
        cvss = float(max(cvss))
    else:
        cvss = "N/A"
    
    if cvss == "N/A" or cvss >= 7:
        if cvss == "N/A":
            score = ""
            pass
        elif cvss >= 9:
            score = " (Critical)"
        elif 7 <= cvss < 9:
            score = " (High)"

        sender = <enter sender email>
        recipient = <enter recipient email>

        msg = MIMEMultipart('alternative')
        msg['Subject'] = title + "- cvss: " + str(cvss) + score
        msg['From'] = sender
        msg['To'] = recipient

        part = MIMEText(contenu_mail, 'html')
        msg.attach(part)

        server = smtplib.SMTP(<enter smtp server IP>)
        try:
            server.sendmail(sender, recipient, msg.as_string())
        except smtplib.SMTPException as e:
            print(e)

        server.quit()

############ CVE -c / --cve ############
def is_cve(txt):
    match = re.search("(CVE|cve)-[0-9]{4}-[0-9]{4,}$", txt)
    if match:
        return True
    else:
        return False

# Check if parameter is a CVE
def action_cve(txt):
    if is_cve(txt):
        cve_info(txt)
    else:
        print("\"" + txt + "\" is not a valid CVE, aborting.")

# Search information about a CVE (Description, published date, ...)
def cve_info(txt):
    nist_api_url = "https://services.nvd.nist.gov/rest/json/cve/1.0/" + txt
    base_request = requests.get(nist_api_url)
    if base_request.status_code == 200:
        todos = json.loads(base_request.text)
        cve = todos["result"]["CVE_Items"][0]["cve"]["CVE_data_meta"]["ID"]
        source = todos["result"]["CVE_Items"][0]["cve"]["CVE_data_meta"]["ASSIGNER"]
        print("cve: ", cve)
        print("publishedDate: ", todos["result"]["CVE_Items"][0]["publishedDate"].split("T")[0])
        print("lastModifiedDate: ", todos["result"]["CVE_Items"][0]["lastModifiedDate"].split("T")[0])
        print("assigner: ", source)
        print("description: ", todos["result"]["CVE_Items"][0]["cve"]["description"]["description_data"][0]["value"])
        
        try:
            cvss = todos["result"]["CVE_Items"][0]["impact"]["baseMetricV3"]["cvssV3"]["baseScore"]
            print("baseScore: ", cvss)

        except KeyError:
            print("baseScore: Unknown or too old")
            cvss = "0.0"

        nist_url = "https://nvd.nist.gov/vuln/detail/" + txt
        print("More info: " + nist_url + "\n")

    else:
        print('"', txt, "\" not found in database.")

############ INPUT_FILE -i / --input-file ############
# Search CVE for keyword (publisher or product) and version in a xls file
def input_file(txt,output):
    match = {
        "fortigate":"fortios"
    }
    if os.path.isfile(txt):
        check_cve = {}
        
        xls = pd.read_excel(txt)

        for line in range(0,len(xls)):
            version = str(xls['Version'][line])
            
            keyword = xls['Modèle'][line]
            keyword = match[keyword.split(" ")[0].lower()]
            
            product_and_version = str(keyword + "-" + version)
            
            print(product_and_version)
            if product_and_version not in check_cve:
                keyword_search_cve(keyword,version,output)
    else:
        print("\"" + txt + "\" is not a valid file, aborting.")

############ KEYWORD -k / --keyword ############
# Connect to NIST JSON page with cpe information
def keyword_search_cve(input_keyword,input_version,output):
    if os.path.exists(output):
        if os.path.getsize(output) == 0:
            csv_search = "cve,cvss,vendor,product,version\n"
        else:
            csv_search = ""
    else:
        csv_search = "cve,cvss,vendor,product,version\n"

    input_keyword = input_keyword.replace(" ","_")
    
    nist_url = "https://services.nvd.nist.gov/rest/json/cpes/1.0?resultsPerPage=1&addOns=cves&cpeMatchString=cpe:2.3:*:" + input_keyword + "*:*:" + input_version + "*"
    base_request = requests.get(nist_url)

    if base_request.status_code == 200:
        if json.loads(base_request.text)["totalResults"] == 0:

            nist_url = "https://services.nvd.nist.gov/rest/json/cpes/1.0?resultsPerPage=1&addOns=cves&cpeMatchString=cpe:2.3:*:*:" + input_keyword + "*:" + input_version + "*"
            base_request = requests.get(nist_url)

            if json.loads(base_request.text)["totalResults"] == 0:
                print("No CVE found !!")
                return

        cves = json.loads(base_request.text)["result"]["cpes"][0]["vulnerabilities"]

        if cves == [""]:
            print("No CVE found !!")
            return            

        header = True
        for i in range (0, len(cves)):
            nist_cve_url = "https://services.nvd.nist.gov/rest/json/cve/1.0/" + cves[i] + "?addOns=dictionaryCpes"
            base_request_cve = requests.get(nist_cve_url)

            todos = json.loads(base_request_cve.text)

            csv_search = keyword_screen(header,todos,cves[i],input_keyword,input_version,csv_search)
            header = False

        if output != "":
            output_csv(output,csv_search)
        else:
            pass

    else:
        print("Erreur: " + str(base_request.status_code))

def keyword_screen(header,todos,cve,input_keyword,input_version,csv_search):   
    view = False
    index = 0

    if header == True:
        print("\nFound CVE:\n")
        print("--------------------------------------------------------------------------------------------------------------------------------------------------")
        print("CVE             | Score     | Vendor               | Product                                  | Version                                           |")
        print("--------------------------------------------------------------------------------------------------------------------------------------------------")
    else:
        pass

    cvss = todos["result"]["CVE_Items"][0]["impact"]

    if "baseMetricV3" in cvss:
        cvss = str(cvss["baseMetricV3"]["cvssV3"]["baseScore"])
    else:
        cvss = str(cvss["baseMetricV2"]["cvssV2"]["baseScore"]) + " (V2)"

    if len(cve) != 15:
        for k in range (15 - len(cve)):
            cve += " "
    if len(cvss) != 9:
        for k in range (9 - len(cvss)):
            cvss += " "

    nodes = todos["result"]["CVE_Items"][0]["configurations"]["nodes"]
    for k in range(0,len(nodes)):
        cpe_match = nodes[k]["cpe_match"]

        for i in range(0,len(cpe_match)):
            match = False
            cpe_name = cpe_match[i]["cpe_name"]
            if cpe_name == []:
                cpe23uri = cpe_match[i]["cpe23Uri"]
                cpe23uri = cpe23uri.split(":")
            
                vendor = cpe23uri[3]
                product = cpe23uri[4]

                version = cpe23uri[5]

                if re.search(r"^"+input_version,version) and (input_keyword.lower() in vendor or input_keyword.lower() in product):
                    match = True
                    other = cpe23uri[6]+" "+cpe23uri[7]+" "+cpe23uri[8]+" "+cpe23uri[9]+" "+cpe23uri[10]+" "+cpe23uri[11]+" "+cpe23uri[12]
                    other = other.replace("*","")
                else:
                    pass
            elif cpe_name != []:
                for k in range(0,len(cpe_name)):
                    cpe23uri = cpe_name[k]["cpe23Uri"]
                    cpe23uri = cpe23uri.split(":")

                    vendor = cpe23uri[3]
                    product = cpe23uri[4]
                    version = cpe23uri[5]

                    if re.search(r"^"+input_version,version) and (input_keyword.lower() in vendor or input_keyword.lower() in product):
                        match = True
                        other = cpe23uri[6]+" "+cpe23uri[7]+" "+cpe23uri[8]+" "+cpe23uri[9]+" "+cpe23uri[10]+" "+cpe23uri[11]+" "+cpe23uri[12]
                        other = other.replace("*","")
                        break
                    else:
                        pass
            
            version = version.replace("*","ANY")
            version = version.replace("-","N/A")

            if match == True:
                if "versionEndExcluding" in cpe_match[i]:
                    version = cpe_match[i]["versionEndExcluding"]
                    if "versionStartIncluding" in cpe_match[i]:
                        version_start = cpe_match[i]["versionStartIncluding"]
                        version_print = version_start + " to " + version + " (Exclude)"
                    else:
                        version_print = "< " + version
                elif "versionEndIncluding" in cpe_match[i]:
                    version = cpe_match[i]["versionEndIncluding"]
                    if "versionStartIncluding" in cpe_match[i]:
                        version_start = cpe_match[i]["versionStartIncluding"]
                        version_print = version_start + " to " + version + " (Include)"
                    else:
                        version_print = "<= " + version       
                else:
                    if version == "*":
                        version = "ANY"
                    else:
                        version_print = version

                if len(vendor) != 20:
                    for k in range (0,20 - len(vendor)):
                        vendor += " "
                if len(product) != 40:
                    for k in range (40 - len(product)):
                        product += " "
                if len(version_print) + len(other) != 48:
                    for k in range (48 - (len(version_print) + len(other))):
                        other += " "

                if index == 0:
                    print(cve + " | " + cvss + " | " + vendor + " | " + product + " | " + version_print + " " + other + " |")
                    csv_search += cve + "," + cvss + "," + vendor + "," + product + "," + version_print + " " + other + "\n"
                    index += 1
                else: 
                    print("               " + " | " + "         " + " | " + "                    " + " | " + product + " | " + version_print + " " + other + " |")
                    csv_search += "," + "," + "," + product + "," + version_print + " " + other + "\n"
                view = True
            else:
                pass

    if view == True:
        print("--------------------------------------------------------------------------------------------------------------------------------------------------")
    else:
        pass

    return csv_search

# Export to output with --output parameter
def output_csv(output,csv_search):
    f = open(output, "a")
    f.write(csv_search)
    f.close

# MAIN
def main(): 
    parser = argparse.ArgumentParser()
    parser.add_argument('-u','--url', help='show today\'s CVE',action='store_true')
    parser.add_argument('-i','--input', help='Choose the path to input file containing product and version e.g. "fortios.csv"')
    parser.add_argument('-k','--keyword', help='Choose product e.g. "fortios" or vendor e.g "fortigate"')
    parser.add_argument('--version',help='Use with -k. Choose version e.g. "6.4.4"')
    parser.add_argument('-o','--output',help='Output keyword result to csv')
    parser.add_argument('-c','--cve', help='show CVE informations e.g. "CVE-2020-1472"')
    
    args = parser.parse_args()

    if args.url == True:
        search_cert()
        return

    if args.cve:
        action_cve(args.cve)

    if args.input and args.output:
        input_file(args.input,args.output)
    elif args.input:
        input_file(args.input,"") 

    if args.keyword and args.version and args.output:
        keyword_search_cve(args.keyword,args.version,args.output)
    elif args.keyword and args.version:
        keyword_search_cve(args.keyword,args.version,"")
    elif args.keyword:
        print("Version missing, aborting.")

if __name__ == "__main__":
    try: 
        main() 
    except Exception as err: 
        print( "General error : ", err ) 
        exit( 1 )
