#!/usr/bin/env python3

###################################### Réalisé par VoyN1ch ###################################################################

"""
usage: searchcve_certfr.py [-h] [-s] [-i INPUT_FILE] {[-k KEYWORD --version VERSION] -o OUTPUT} [--cve CVE] [--cert CERT]
optional arguments:
  -h, --help                show this help message and exit
  -s, --scan                show today\'s CVE
  -i, --input INPUT_FILE    Choose the path to input file containing product and version e.g. "fortios.csv"
  -k, --keyword KEYWORD     Choose product e.g. "fortios" or vendor e.g "fortigate"
  --version VERSION         Use with -k. Choose version e.g. "6.4.4"
  -o, --output OUTPUT       Output keyword result to csv
  --cve CVE                 show CVE information e.g. "CVE-2020-1472"
  --cert CERT               show CERT information e.g. "CERTFR-2022-AVI-890" 
"""

import json
import argparse
import re
import requests
from bs4 import BeautifulSoup
from time import sleep
from datetime import date,datetime
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import pandas as pd
import os
import feedparser

APIKEY = <TO COMPLETE>
SMTPSERVER = <TO COMPLETE>
SENDER = <TO COMPLETE>
RECIPIENT = <TO COMPLETE>

########################### -s / --scan ###########################

def lookingForCertUrls(url):
    certId = []
    feed = feedparser.parse(url)
    today = date.today()
    today = today.strftime("%d %b %Y")
    for i in range(0,len(feed.entries)):
        entry = feed.entries[i]
        if today in entry.published:
            certId.append(entry.id)
    return today,certId

def readCheckCertFile(today,certId):
    checkCertFile = "checkCert.txt"
    if os.path.exists(checkCertFile):
        ctime = os.path.getctime(checkCertFile)
        ctimeConvert = datetime.fromtimestamp(ctime)
        if today == ctimeConvert.strftime("%d %b %Y"):
            f = open(checkCertFile,"r")
            if certId in f.read():
                return False
            else:
                return True
        else:
            os.remove(checkCertFile)
            return True
    else:
        return True

def lookingForCvesAndCvss(searchCves):
    cves = {}
    if searchCves != []:
        cvesList = list(set(searchCves))
        for cve in cvesList:
            cves[cve] = {}
            nistUrl = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve}"
            nistRequest = requests.get(nistUrl,headers={"apiKey":APIKEY})
            if nistRequest.status_code == 200:
                if json.loads(nistRequest.text)["resultsPerPage"] != 0:
                    jsonLoad = json.loads(nistRequest.text)
                    cves[cve]["description"] = jsonLoad["vulnerabilities"][0]["cve"]["descriptions"][0]["value"]
                    metrics = jsonLoad["vulnerabilities"][0]["cve"]["metrics"]
                    if metrics != {}:
                        if "cvssMetricV31" in metrics:
                            metric = "cvssMetricV31"
                        elif "cvssMetricV30" in metrics:
                            metric = "cvssMetricV30"
                        elif "cvssMetricV2" in metrics:  
                            metric = "cvssMetricV2"

                        cves[cve]["vectorString"] = str(metrics[metric][0]["cvssData"]["vectorString"])
                        cves[cve]["cvssBase"] = str(metrics[metric][0]["cvssData"]["baseScore"])
                        cves[cve]["cvssImpact"] = str(metrics[metric][0]["exploitabilityScore"])
                        cves[cve]["cvssExploitability"] = str(metrics[metric][0]["impactScore"])                       
                    else:
                        cves[cve]["cvssBase"] = "N/A\n"
                else:
                    cves[cve]["description"] = "CVE not found"
                    cves[cve]["cvssBase"] = "N/A\n"
                sleep(0.6)
            else:
                print(f"Erreur: {str(nistRequest.status_code)}")
    else:
        print("CVE not found")
        exit(0)
    return cves

def searchCertWebsite(urls):
    certRequest = requests.get(urls)
    soup = BeautifulSoup(certRequest.text, "html5lib")

    body = str(soup.find("article", class_="article"))
    body = re.sub("\t+(<div.+\n+|<img.+\n+)", "", body)
    body = body.encode('latin1').decode()

    certId = str(soup.find_all("td", class_="col-xs-8")[0].string.strip())
    titre = str(soup.find_all("td", class_="col-xs-8")[1].string.strip())
    titre = titre.encode('latin1').decode()

    return body, certId, titre
    
def prettyPrint(certId,titre,certUrl,cves,header):
    if header == True:
        print("\nFound CERTs:\n")
        print("---------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        print("CERT                | Titre                                                        | URL                                                    | CVE             | CVSS |")
        print("---------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        
    if len(certId) != 16:
        for i in range (16 - len(certId)):
            certId += " "
    if len(titre) != 60:
        for i in range (60 - len(titre)):
            titre += " "
    if len(certUrl) != 49:
        for i in range (49 - len(certUrl)):
            certUrl += " "

    first = True
    for cve, infos in cves.items():
        cvssBase = infos["cvssBase"]
        if len(cve) != 15:
            for i in range (15 - len(cve)):
                cve += " "
        if len(cvssBase) != 4:
            for i in range (4 - len(cvssBase)):
                cvssBase += " "

        if first == True:
            print(f"{certId} | {titre} | {certUrl} | {cve} | {cvssBase} |")
            first = False
        else:
            print(f"                    |                                                              |                                                        | {cve} | {cvssBase} |")

def sendEmail(certId,body,titre,cves):
    cvssBase = []
    for cve, infos in cves.items():
        if infos["cvssBase"] != "N/A":
            cvssBase.append(infos["cvssBase"])

    try:
        maxCvss = float(max(cvssBase))
    except:
        maxCvss = "N/A"

    if maxCvss == "N/A":
        score = ""   
    elif maxCvss >= 9:
        score = " (Critical)"
    elif 7 <= maxCvss < 9:
        score = " (High)"
    elif 5 <= maxCvss < 7:
        score = " (Medium)"
    elif  0 <= maxCvss < 5:
        score = " (Low)"

    sender = SENDER
    recipient = RECIPIENT
    msg = MIMEMultipart('alternative')
    msg['Subject'] = f"{titre} - cvss: {maxCvss} {score}"
    msg['From'] = sender
    msg['To'] = recipient
    part = MIMEText(body, 'html')
    msg.attach(part)

    server = smtplib.SMTP(SMTPSERVER)
    try:
        server.sendmail(sender, recipient, msg.as_string())
        f = open("checkCert.txt","a")
        f.write(f"{certId}\n")
        f.close()
    except smtplib.SMTPException as e:
        print(e)

    server.quit()

def lookingForTodaysCve():
    today,avisCertUrls = lookingForCertUrls("https://www.cert.ssi.gouv.fr/avis/feed/")
    today,alertCertUrls = lookingForCertUrls("https://www.cert.ssi.gouv.fr/alerte/feed/")
    certUrls = avisCertUrls + alertCertUrls

    if certUrls == []:
        print("No CERT found, aborting.")
        return

    header = True
    for certurl in certUrls:
        certRequest = requests.get(certurl)
        searchCves = re.findall("CVE-[0-9]{4}-[0-9]{4,}", certRequest.text)
        body, certId, titre = searchCertWebsite(certurl)
        if readCheckCertFile(today,certId):
            cves = lookingForCvesAndCvss(searchCves)
            prettyPrint(certId,titre,certurl,cves,header)
            print("---------------------------------------------------------------------------------------------------------------------------------------------------------------------")
            sendEmail(certId,body,titre,cves)
            header = False
        else:
            pass

############ CERT --cert ############
def isCertId(certId):
    match = re.search("(CERTFR|certfr)-[0-9]{4}-(AVI|avi|ALE|ale)-[0-9]{3,}$", certId)
    if match:
        return True
    else:
        return False

def actionCertId(certId):
    if isCertId(certId):
        certInformation(certId)
    else:
        print("\"" + certId + "\" is not a valid CERT, aborting.")  

def certInformation(certId):
    if re.search("avi|AVI",certId):
        certUrl = "https://www.cert.ssi.gouv.fr/avis/"+certId
    elif re.search("ale|ALE",certId):
        certUrl = "https://www.cert.ssi.gouv.fr/alerte/"+certId
    
    certRequest = requests.get(certUrl)
    searchCves = re.findall("CVE-[0-9]{4}-[0-9]{4,}", certRequest.text)

    cves = lookingForCvesAndCvss(searchCves)

    for cve, infos in cves.items():
        print(f"cve: {cve}")
        print(f"description: {infos['description']}")
        print(f"Base score: {infos['cvssBase']}")
        try:
            print(f"Vector: {infos['vectorString']}")
            print(f"Impact score: {infos['cvssImpact']}")
            print(f"Exploitability score: {infos['cvssExploitability']}\n")
        except:
            pass

############ CVE -c / --cve ############
def isCveId(cveId):
    match = re.search("(CVE|cve)-[0-9]{4}-[0-9]{4,}$", cveId)
    if match:
        return True
    else:
        return False

# Check if parameter is a CVE
def actionCveId(cveId):
    if isCveId(cveId):
        cveInformation(cveId)
    else:
        print("\"" + cveId + "\" is not a valid CVE, aborting.")

# Search information about a CVE (Description, published date, ...)
def cveInformation(cveId):
    cveId = cveId.split(",")
    cves = lookingForCvesAndCvss(cveId)
    for cve, infos in cves.items():
        print(f"cve: {cve}")
        print(f"description: {infos['description']}")
        print(f"Base score: {infos['cvssBase']}")
        try:
            print(f"Vector: {infos['vectorString']}")        
            print(f"Impact score: {infos['cvssImpact']}")
            print(f"Exploitability score: {infos['cvssExploitability']}")
        except:
            pass
        nistUrl = f"https://nvd.nist.gov/vuln/detail/{cve}"
        print(f"More info: {nistUrl}\n")

############ INPUT_FILE -i / --input-file ############
# Search CVE for keyword (publisher or product) and version in a xls file
def input_file(txt,output):
    if os.path.isfile(txt):
        check_cve = {}        
        xls = pd.read_excel(txt)

        for line in range(0,len(xls)):
            inputVersion = str(xls['Version'][line])            
            inputKeyword = xls['Modèle'][line]
            
            product_and_version = str(inputKeyword + "-" + inputVersion)            
            print(product_and_version)

            if product_and_version not in check_cve:
                searchCves(inputKeyword,inputVersion,inputVersion,output)
    else:
        print("\"" + txt + "\" is not a valid file, aborting.")

############ KEYWORD -k / --keyword ############
# Connect to NIST JSON page with cpe information
def connectToNistApi(url):
    baseRequest = requests.get(url,headers= {'apiKey': APIKEY})
    if baseRequest.status_code == 200:
        if json.loads(baseRequest.text)["totalResults"] != 0:
            jsonLoad = json.loads(baseRequest.text)
            return jsonLoad
        else:
            print(f'Not found: {url}')
            exit(0)
    else:
        print(f"Erreur: {str(baseRequest.status_code)}")
        exit(0)

def matchVersion(matchStrings,version):
    try:
        version = matchStrings["versionEndExcluding"]
        if "versionStartIncluding" in matchStrings:
               versionStart = matchStrings["versionStartIncluding"]
               printVersion = f"{versionStart} to {version} (Exclude)"
        else:
            printVersion = f"< {version}"
    except:
        version = matchStrings["versionEndIncluding"]
        if "versionStartIncluding" in matchStrings:
            versionStart = matchStrings["versionStartIncluding"]
            printVersion = f"{versionStart} to {version} (Include)"
        else:
            printVersion = f"<= {version}"
    return printVersion

def matchCpe(jsonLoadCpeMatch,cpe,inputVersion):
    printVersion = []
    matchStrings = jsonLoadCpeMatch["matchStrings"]
    for i in range(0,len(matchStrings)):
        criteria = matchStrings[i]["criteria"]
        if cpe in criteria:
            matches = matchStrings[i]["matches"]
            if ("versionEndExcluding" in matchStrings[i]) or ("versionEndIncluding" in matchStrings[i]):
                for j in range(0,len(matches)):
                    cpeName = matches[j]["cpeName"]
                    if f":{inputVersion}:" in cpeName:
                        printVersion.append(matchVersion(matchStrings[i],inputVersion))
                        break
                    else:
                        pass
            else:
                for j in range(0,len(matches)):
                    cpeName = matches[j]["cpeName"]
                    if f":{inputVersion}:" in cpeName:
                        cpeNameList = cpeName.split(":")
                        version = cpeNameList[5]
                        other = f"{cpeNameList[6]} {cpeNameList[7]} {cpeNameList[8]} {cpeNameList[9]} {cpeNameList[10]} {cpeNameList[11]} {cpeNameList[12]}"
                        other = other.replace("*","")
                        printVersion.append(f"{version} {other}")
        else:
            pass
    return printVersion

def screen(cpeName,cveId,cvss,printVersion,header,body,footer,csvSearch):
    cpeNameSplit = cpeName.split(":")
    vendor = cpeNameSplit[3]
    product = cpeNameSplit[4]

    if len(cveId) != 15:
        for k in range(15 - len(cveId)):
            cveId += " "
    if len(cvss) != 9:
        for k in range (9 - len(cvss)):
            cvss += " "
    if len(vendor) != 20:
        for k in range (20 - len(vendor)):
            vendor += " "
    if len(product) != 40:
        for k in range (40 - len(product)):
            product += " "
    if len(printVersion) != 34:
        for k in range (34 - (len(printVersion))):
            printVersion += " "

    if header == True:
        print("\nFound CVE:\n")
        print("-----------------------------------------------------------------------------------------------------------------------------------")
        print("CVE             | Score     | Vendor               | Product                                  | Version                           |")
        print("-----------------------------------------------------------------------------------------------------------------------------------")

    if body == True:
        print(f"{cveId} | {cvss} | {vendor} | {product} | {printVersion}|")
        csvSearch += f"{cveId},{cvss},{vendor},{product},{printVersion}\n"
    else:
        print(f"                |           |                      |                                          | {printVersion}|")
        csvSearch += f",,,,{printVersion}\n"

    if footer == True:
        print("-----------------------------------------------------------------------------------------------------------------------------------")

    return csvSearch

# Export to output with --output parameter
def outputCsv(output,csv_search):
    f = open(output, "a")
    f.write(csv_search)
    f.close

def searchCves(inputKeyword,inputVersion,output):
    if os.path.exists(output):
        if os.path.getsize(output) == 0:
            csvSearch = "cve,cvss,vendor,product,version\n"
        else:
            csvSearch = ""
    else:
        csvSearch = "cve,cvss,vendor,product,version\n"

    cpesUrl = f"https://services.nvd.nist.gov/rest/json/cpes/2.0?keywordSearch={inputKeyword} {inputVersion}&keywordExactMatch"
    jsonLoadCpes = connectToNistApi(cpesUrl)
    cpeName = jsonLoadCpes["products"][0]["cpe"]["cpeName"]
    cpeNameSplit = cpeName.split(":")
    cpe = f"cpe:2.3:{cpeNameSplit[2]}:{cpeNameSplit[3]}:{cpeNameSplit[4]}"

    cvesUrl = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName={cpe}:{inputVersion}"
    jsonLoadCves = connectToNistApi(cvesUrl)
    vulnerabilities = jsonLoadCves["vulnerabilities"]

    header = True
    for vulnerability in vulnerabilities:
        cveId = vulnerability["cve"]['id']
        cveMetrics = vulnerability["cve"]['metrics']
        if "cvssMetricV31" in cveMetrics:
            cvss = str(cveMetrics["cvssMetricV31"][0]["cvssData"]["baseScore"])
        elif "cvssMetricV30" in cveMetrics:
            cvss = str(cveMetrics["cvssMetricV30"][0]["cvssData"]["baseScore"])
        elif "cvssMetricV2" in cveMetrics:
            cvss = str(cveMetrics["cvssMetricV2"][0]["cvssData"]["baseScore"]) + " (V2)"
        else:
            cvss = "N/A"

        cpeMatchUrl = f"https://services.nvd.nist.gov/rest/json/cpematch/2.0?cveId={cveId}"
        jsonLoadCpeMatch = connectToNistApi(cpeMatchUrl)

        printVersions = matchCpe(jsonLoadCpeMatch,cpe,inputVersion)
        
        body=True
        count = 1
        for printVersion in printVersions:
            if count == len(printVersions):
                csvSearch = screen(cpeName,cveId,cvss,printVersion,header,body,True,csvSearch)
            else:
                csvSearch = screen(cpeName,cveId,cvss,printVersion,header,body,False,csvSearch)
            header = False
            body = False
            count += 1

        if output != "":
            outputCsv(output,csvSearch)
        else:
            pass
        
        sleep(6)

# MAIN
def main(): 
    parser = argparse.ArgumentParser(usage='%(prog)s [-h] [-s] [-i INPUT_FILE] {[-k KEYWORD --version VERSION] -o OUTPUT} [--cve CVE] [--cert CERT]')
    parser.add_argument('-s','--scan', help='Looking for today\'s CVE',action='store_true')
    parser.add_argument('-i','--input', help='Choose the path to input file containing product and version e.g. "fortios.csv"')
    parser.add_argument('-k','--keyword', help='Choose product e.g. "fortios" or vendor e.g "fortigate"')
    parser.add_argument('--version',help='Use with -k. Choose version e.g. "6.4.4"')
    parser.add_argument('-o','--output',help='Output keyword result to csv')
    parser.add_argument('--cve', help='show CVE informations e.g. "CVE-2020-1472"')
    parser.add_argument('--cert', help='show CERT informations e.g. "CERTFR-2022-AVI-890"')
   
    args = parser.parse_args()
    
    if args.scan == True:
        lookingForTodaysCve()
        return
    elif args.cve:
        actionCveId(args.cve)
    elif args.cert:
        actionCertId(args.cert)
    elif args.input and args.output:
        input_file(args.input,args.output)
    elif args.input:
        input_file(args.input,"") 
    elif args.keyword and args.version and args.output:
        searchCves(args.keyword,args.version,args.output)
    elif args.keyword and args.version:
        searchCves(args.keyword,args.version,"")
    elif args.keyword:
        print("Version missing, aborting.")
    else:
        parser.print_usage()

if __name__ == "__main__":
    try: 
        main() 
    except Exception as err: 
        print( "General error : ", err ) 
        exit( 1 )
